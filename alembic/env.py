import sys
import os
import asyncio
import logging

from sqlalchemy import pool
from sqlalchemy.ext.asyncio import create_async_engine
from alembic import context

# ------------------------------
# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ –≤ PYTHONPATH
# ------------------------------
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

# –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –∏–º–ø–æ—Ä—Ç—ã –∏–∑ app –±—É–¥—É—Ç —Ä–∞–±–æ—Ç–∞—Ç—å
from app.database import Base
from app.core.config import settings

# üëá –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û: –∏–º–ø–æ—Ä—Ç –≤—Å–µ—Ö –º–æ–¥–µ–ª–µ–π, —á—Ç–æ–±—ã Alembic –∏—Ö "—É–≤–∏–¥–µ–ª"
# –∏–Ω–∞—á–µ –æ–Ω —Å–æ–∑–¥–∞—Å—Ç –ø—É—Å—Ç—É—é –º–∏–≥—Ä–∞—Ü–∏—é (–±–µ–∑ —Ç–∞–±–ª–∏—Ü)
from app.models import product, order, order_item, user  # –∏–º–ø–æ—Ä—Ç–∏—Ä—É–π –≤—Å–µ —Å–≤–æ–∏ –º–æ–¥–µ–ª–∏!

# –ö–æ–Ω—Ñ–∏–≥ Alembic
config = context.config

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger("alembic.env")

# –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –º–æ–¥–µ–ª–µ–π (–Ω—É–∂–Ω—ã Alembic –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è)
target_metadata = Base.metadata

# URL –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –±–∞–∑—ã
ASYNC_DATABASE_URL = str(settings.DATABASE_URL)


def run_migrations_offline() -> None:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è SQL –º–∏–≥—Ä–∞—Ü–∏–π –±–µ–∑ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ."""
    context.configure(
        url=ASYNC_DATABASE_URL.replace("asyncpg", "psycopg2"),  # offline-—Ä–µ–∂–∏–º –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç asyncpg
        target_metadata=target_metadata,
        literal_binds=True,
        compare_type=True,
    )

    with context.begin_transaction():
        context.run_migrations()


async def run_migrations_online_async() -> None:
    """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π –≤ async-—Ä–µ–∂–∏–º–µ."""
    connectable = create_async_engine(
        ASYNC_DATABASE_URL,
        poolclass=pool.NullPool,
    )

    async with connectable.connect() as connection:
        await connection.run_sync(run_migrations)

    await connectable.dispose()


def run_migrations(connection):
    """–°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∑–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–π (—á–µ—Ä–µ–∑ run_sync)."""
    context.configure(
        connection=connection,
        target_metadata=target_metadata,
        compare_type=True,
    )
    with context.begin_transaction():
        context.run_migrations()


def run_migrations_online() -> None:
    """–ó–∞–ø—É—Å–∫ async –º–∏–≥—Ä–∞—Ü–∏–π —á–µ—Ä–µ–∑ asyncio."""
    asyncio.run(run_migrations_online_async())


# ------------------------------
# –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫ –∑–∞–ø—É—Å–∫–∞—Ç—å
# ------------------------------
if context.is_offline_mode():
    run_migrations_offline()
else:
    run_migrations_online()