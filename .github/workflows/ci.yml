name: CI/CD Pipeline

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: postgres
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    strategy:
      matrix:
        python-version: [3.11, 3.12]

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libpq-dev postgresql-client
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Prepare test database
      env:
        PGPASSWORD: postgres
      run: |
        psql -h localhost -U postgres -c "CREATE DATABASE marketplace;"
    
    - name: Run tests
      env:
        SECRET_KEY: test_secret_key_for_development_only
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/marketplace
        DEBUG: "true"
        BACKEND_CORS_ORIGINS: "http://localhost:3000"
      run: |
        pytest -v

  lint:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run flake8
      run: |
        flake8 app --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 app --count --exit-zero --max-complexity=10 --max-line-length=88 --ignore=E501,W503 --statistics
    
    - name: Run black
      run: |
        black --check app
    
    - name: Run isort
      run: |
        isort --check-only app

  security:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Install safety (separate from main dependencies)
      continue-on-error: true
      run: |
        # Try to install latest safety, if it fails due to pydantic conflict, use workaround
        pip install "safety>=3.6.0" || pip install safety --no-deps || pip install "safety==3.3.1" --no-deps
        # Install minimal required dependencies manually if needed
        pip install dparse packaging pyyaml requests click || true
    
    - name: Run safety check
      continue-on-error: true
      run: |
        safety check --file requirements.txt 2>&1 || echo "Safety check completed with warnings"
    
    - name: Run bandit
      continue-on-error: true
      run: |
        bandit -r app/ || true

  docker:
    runs-on: ubuntu-latest
    needs: [test, lint, security]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Docker image
      run: |
        docker build -t marketplace:latest .
    
    - name: Test Docker image
      env:
        DATABASE_URL: postgresql://test:test@localhost:5432/test
        SECRET_KEY: test_secret_key_for_docker_test
        DEBUG: "false"
      run: |
        docker run --rm \
          -e DATABASE_URL="$DATABASE_URL" \
          -e SECRET_KEY="$SECRET_KEY" \
          -e DEBUG="$DEBUG" \
          marketplace:latest python -c "import app.main; print('Docker image works!')"
